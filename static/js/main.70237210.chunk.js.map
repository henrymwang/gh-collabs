{"version":3,"sources":["D3Graph.js","App.js","App2.js","serviceWorker.js","index.js"],"names":["makeZoom","g","d3","on","attr","transform","D3Graph","props","state","restart","this","draw","prevProps","prevState","nodes","links","_","svg","transition","duration","call","select","width","height","color","node","data","d","id","exit","remove","enter","append","text","merge","link","simulation","force","alpha","strength","distance","alphaTarget","x","y","source","target","selectAll","setState","onClick","resetZoom","Component","base","idToNodeObj","login","generateNodesLinksNext","res","expanded","newNodes","reduce","acc","curr","concat","targets","newLinks","map","uniqLinks","a","b","nextNodes","filter","has","App","componentDidUpdate","depth","nextToExpand","Promise","all","getFollowers","jsonArr","add","textInput","React","createRef","searchResults","Set","value","fetch","resp","status","json","reject","Error","user","current","getUser","then","githubID","followers","following","avatarUrl","avatar_url","catch","err","constructedRes","console","log","rows","Object","keys","length","alt","src","libraries","name","href","key","className","Prepend","Text","placeholder","aria-label","aria-describedby","ref","type","Append","variant","handleSearch","striped","bordered","hover","handleIncrDepth","viewBox","preserveAspectRatio","updateNodes","existingNodes","newIDs","updateLinks","existingLinks","targetID","allLinks","updateNextToExpand","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+bAMMA,EAAW,SAACC,GAChB,OAAOC,MAAUC,GAAG,OAAQ,WAC1BF,EAAEG,KAAK,YAAaF,IAASG,cAsHlBC,E,YAlHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,cAHM,E,iFAQjBC,KAAKC,S,yCAGYC,EAAWC,GAAY,IAAD,EAChBH,KAAKH,MAAtBO,EADiC,EACjCA,MAAOC,EAD0B,EAC1BA,MACRC,UAAUJ,EAAUE,MAAOA,IAAWE,UAAUJ,EAAUG,MAAOA,IACpEL,KAAKF,MAAMC,Y,kCAKb,IAAMQ,EAAMf,IAAU,OACtBe,EAAIC,aAAaC,SAAS,KAAMC,KAAKpB,EAASiB,EAAII,OAAO,MAAMhB,UAAWH,O,6BAIpE,IAAD,OACCe,EAAMf,IAAU,OAAOE,KAAK,QAAS,eAC3CkB,GAASL,EAAIb,KAAK,SAClBmB,GAAUN,EAAIb,KAAK,UACnBoB,EAAQtB,IAAgBA,KAEpBO,EAAU,YAEZgB,EAAOA,EAAKC,KAAK,EAAKnB,MAAMO,MAAO,SAASa,GAAK,OAAOA,EAAEC,MACrDC,OAAOC,SAOZ,IAAIC,EAAQN,EAAKM,QAAQC,OAAO,KAC7B5B,KAAK,QAAS,QAEJ2B,EAAMC,OAAO,QACvB5B,KAAK,IAAK,GACVA,KAAK,IAAK,GACV6B,KAAK,SAAAN,GAAC,OAAIA,EAAEC,KACZxB,KAAK,OAAQ,SACbA,KAAK,SAAU,SACfA,KAAK,eAAgB,KAEV2B,EAAMC,OAAO,UACxB5B,KAAK,OAAQ,SAAAuB,GAAC,OAAIH,EAAMG,EAAEC,MAC1BxB,KAAK,IAAK,GAEbqB,EAAOA,EAAKS,MAAMH,IAMlBI,EAAOA,EAAKT,KAAK,EAAKnB,MAAMQ,QACvBc,OAAOC,SACZK,EAAOA,EAAKJ,QAAQC,OAAO,QAAQE,MAAMC,GAGzCC,EAAWtB,MAAM,EAAKP,MAAMO,OAC5BsB,EAAWC,MAAM,QAAQtB,MAAM,EAAKR,MAAMQ,OAC1CqB,EAAWE,MAAM,GAAG7B,WAgBlB2B,EAAalC,IAAmBQ,KAAKH,MAAMO,OAC1CuB,MAAM,SAAUnC,MAAmBqC,UAAU,MAE7CF,MAAM,OAAQnC,IAAaQ,KAAKH,MAAMQ,OAAOa,GAAG,SAAAD,GAAC,OAAIA,EAAEC,KAAIY,SAAS,KACpEH,MAAM,IAAKnC,IAAUoB,EAAM,GAAGiB,SAAS,IACvCF,MAAM,IAAKnC,IAAUqB,EAAO,GAAGgB,SAAS,IACxCE,YAAY,KACZtC,GAAG,OApBO,WAIbsB,EAAKrB,KAAK,YAAa,SAASuB,GAAK,MAAO,aAAeA,EAAEe,EAAI,IAAMf,EAAEgB,EAAI,MAG7ER,EAAK/B,KAAK,KAAM,SAASuB,GAAK,OAAOA,EAAEiB,OAAOF,IACzCtC,KAAK,KAAM,SAASuB,GAAK,OAAOA,EAAEiB,OAAOD,IACzCvC,KAAK,KAAM,SAASuB,GAAK,OAAOA,EAAEkB,OAAOH,IACzCtC,KAAK,KAAM,SAASuB,GAAK,OAAOA,EAAEkB,OAAOF,MAY5C1C,EAAIgB,EAAIe,OAAO,KAAK5B,KAAK,QAAS,cAClC+B,EAAOlC,EAAE+B,OAAO,KAAK5B,KAAK,SAAU,QAAQA,KAAK,eAAgB,KAAK0C,UAAU,SAChFrB,EAAOxB,EAAE+B,OAAO,KAAK5B,KAAK,SAAU,QAAQA,KAAK,eAAgB,KAAK0C,UAAU,SAGpF7B,EAAIG,KAAKpB,EAASC,IAElBQ,IAEAC,KAAKqC,SAAS,CAACtC,QAASA,M,+BAGhB,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQuC,QAAS,SAAAhC,GAAC,OAAI,EAAKiC,cAA3B,mB,GA7GcC,aCGhBC,EAAO,yBAEPC,EAAc,SAACzB,GACnB,MAAO,CAACC,GAAID,EAAE0B,QAGVC,EAAyB,SAACC,EAAKzC,EAAOC,EAAOyC,GAOjD,IAAIC,EAAWF,EAAIG,OAAO,SAACC,EAAKC,GAC9B,OAAOD,EAAIE,OAAOD,EAAKE,UACtB,IAGHL,EAAWzC,UAAUF,EAAO2C,EAAU,MAItC,IAAIM,EAAWR,EAAIG,OAAO,SAACC,EAAKC,GAC9B,OAAOD,EAAIE,OAAOD,EAAKE,QAAQE,IAAI,gBAAEpC,EAAF,EAAEA,GAAF,MAAW,CAACgB,OAAQgB,EAAKhC,GAAIiB,OAAQjB,OACvEb,GAcH,MAAO,CAAC0C,SAAUA,EAAUQ,UAXZjD,WAAW+C,EAAU,SAACG,EAAGC,GACvC,OAAQD,EAAEtB,SAAWuB,EAAEvB,QAAUsB,EAAErB,SAAWsB,EAAEtB,QAC/CqB,EAAEtB,SAAWuB,EAAEtB,QAAUqB,EAAErB,SAAWsB,EAAEvB,SASOwB,UAHlCb,EAAIG,OAAO,SAACC,EAAKC,GAC/B,OAAOD,EAAIE,OAAOD,EAAKE,QAAQO,OAAO,gBAAEzC,EAAF,EAAEA,GAAF,OAAW4B,EAASc,IAAI1C,OAC7D,MAqOU2C,E,YAhOb,WAAYhE,GAAQ,IAAD,8BACjB,4CAAMA,KA+BRiE,mBAhCmB,sCAgCE,WAAO5D,EAAWC,GAAlB,iCAAAqD,EAAA,wDACfrD,EAAU4D,QAAU,EAAKjE,MAAMiE,MADhB,yBAGgC,EAAKjE,MAA9CkE,EAHS,EAGTA,aAAc5D,EAHL,EAGKA,MAAO0C,EAHZ,EAGYA,SAAUzC,EAHtB,EAGsBA,MAHtB,SAMD4D,QAAQC,IAAIF,EAAaV,IAAb,sCAC1B,iCAAAE,EAAA,4DAAQtC,EAAR,EAAQA,GAAR,SAEsB,EAAKiD,aAAajD,GAFxC,cAEMkD,EAFN,gBAIsBA,EAAQd,IAAIZ,GAJlC,cAIMU,EAJN,OAMEN,EAASuB,IAAInD,GANf,KAOcA,EAPd,UAOiCkC,EAPjC,8CAOUlC,GAPV,KAOkBkC,QAPlB,iDAD0B,wDANX,OAMbP,EANa,SAkBsBD,EAAuBC,EAAKzC,EAAOC,EAAOyC,GAA5EC,EAlBY,EAkBZA,SAAUQ,EAlBE,EAkBFA,UAAWG,EAlBT,EAkBSA,UAC1B,EAAKrB,SAAS,CAACjC,MAAO2C,EAAU1C,MAAOkD,EAAWS,aAAcN,IAnB/C,yCAhCF,wDAEjB,EAAKY,UAAYC,IAAMC,YACvB,EAAK1E,MAAQ,CACX2E,cAAe,GACf7D,MAAO,IACPC,OAAQ,IACRK,GAAI,WACJd,MAAO,GACPC,MAAO,GACP2D,aAAc,GACdlB,SAAU,IAAI4B,IACdX,MAAO,GAZQ,E,6GAgBLY,G,sFACOC,MAAM,GAAD,OAAInC,EAAJ,kBAAkBkC,I,UACtB,OADdE,E,QACGC,O,gCACMD,EAAKE,O,wEAEbd,QAAQe,OAAO,IAAIC,MAAMJ,EAAKC,U,2KAGpBI,G,sFACEN,MAAM,GAAD,OAAInC,EAAJ,kBAAkByC,EAAlB,e,UACJ,OADdL,E,QACGC,O,gCACMD,EAAKE,O,wEAEbd,QAAQe,OAAO,IAAIC,MAAMJ,EAAKC,U,wIA2BrC9E,KAAKqC,SAAS,WAAYxC,GACxB,MAAO,CAACkE,MAD0B,EAAnBA,MACQ,O,qCAIX,IAAD,OACPY,EAAQ3E,KAAKsE,UAAUa,QAAQR,MACrC3E,KAAKqC,SAAS,CAAC0B,MAAO,EAAG3D,MAAO,GAAIC,MAAO,GAAI2D,aAAc,GAAIlB,SAAU,IAAI4B,MAC/E1E,KAAKoF,QAAQT,GACVU,KAAK,YAAgD,IAEhDZ,EAAgB,CAClBa,SAHiD,EAA7C3C,MAIJ4C,UAJiD,EAAtCA,UAKXC,UALiD,EAA3BA,UAMtBC,UANiD,EAAhBC,YASnC,OADA,EAAKrD,SAAS,CAACoC,cAAeA,IACvBA,EAAca,WAEtBK,MAAM,SAAAC,GAEL,EAAKvD,SAAS,CAACoC,cAAe,OAE/BY,KAAK,SAAAC,GACJ,EAAKnB,aAAamB,GACfD,KAAK,SAAAxC,GACJ,IAAIgD,EAAiB,CAAC3E,GAAIoE,EAAUlC,QAASP,EAAIS,IAAI,kBAAc,CAACpC,GAAf,EAAEyB,UACvD,EAAKN,SAAS,YAA+B,IAA7BjC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAAOyC,EAAc,EAAdA,SAE5BA,EAASuB,IAAIiB,GAF6B,MAGH1C,EAAuB,CAACiD,GAAiBzF,EAAOC,EAAOyC,GAAzFC,EAHqC,EAGrCA,SAAUQ,EAH2B,EAG3BA,UAAWG,EAHgB,EAGhBA,UAG1B,MAAO,CAACtD,MAFR2C,EAAWA,EAASI,OAAO,CAACjC,GAAIoE,IAEPjF,MAAOkD,EAAWS,aAAcN,OAG5DiC,MAAM,SAAAC,GAEL,EAAKvD,SAAS,CAACoC,cAAe,KAC9BqB,QAAQC,IAAIH,S,+BAMZ,IAOJI,EAPG,OACDvB,EAAkBzE,KAAKF,MAAvB2E,cACFa,EAAWb,EAAca,SACzBC,EAAYd,EAAcc,UAC1BC,EAAYf,EAAce,UAC1BC,EAAYhB,EAAcgB,UAI5BO,EADwC,IAAtCC,OAAOC,KAAKzB,GAAe0B,OACrB,6BAGN,4BACE,4BACE,yBAAKC,IAAK,aAAed,EAAU1E,MAAO,GAAIC,OAAQ,GAAIwF,IAAKZ,KAGjE,4BAAMH,GACN,4BAAMC,GACN,4BAAMC,IAKZ,IAAIc,EAAY,CACd,CAACC,KAAM,WAAYC,KAAM,wBACzB,CAACD,KAAM,aAAcC,KAAM,qBAC3B,CAACD,KAAM,gCAAiCC,KAAM,sCAC9C,CAACD,KAAM,aAAcC,KAAM,qCAC3BlD,IAAI,YAAmB,IAAjBiD,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KACZ,OACE,0BAAMC,IAAKF,GACT,uBAAGC,KAAMA,GAAOD,GAChB,gCAKN,OACE,yBAAKG,UAAU,OACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKA,UAAU,sBACf,kBAAC,IAAD,KACE,8CAGA,6BACE,kBAAC,IAAD,CAAYA,UAAU,QACpB,kBAAC,IAAWC,QAAZ,KACE,kBAAC,IAAWC,KAAZ,CAAiB1F,GAAG,gBAApB,MAEF,kBAAC,IAAD,CACE2F,YAAY,4BACZC,aAAW,WACXC,mBAAiB,eACjBC,IAAKhH,KAAKsE,UACV2C,KAAK,SAEP,kBAAC,IAAWC,OAAZ,KACE,kBAAC,IAAD,CAAQC,QAAQ,oBAAoB7E,QAAS,SAAAhC,GAAC,OAAI,EAAK8G,iBAAvD,cAKR,kBAAC,IAAD,CAAKV,UAAU,uBAEjB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,sCACA,wCACA,yCACA,2CAGJ,+BACIvB,MAKV,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAS5F,MAAOJ,KAAKF,MAAMM,MAAOC,MAAOL,KAAKF,MAAMO,SAGtD,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEIL,KAAKF,MAAMM,MAAM+F,OAAS,GAAKnG,KAAKF,MAAMiE,MAAQ,GACjD,6BACC,kBAAC,IAAD,CAAQoD,QAAQ,oBAAoB7E,QAAS,SAAAhC,GAAC,OAAI,EAAKkH,oBAAvD,kBAGA,qCAAWxH,KAAKF,MAAMiE,WAQhC,kBAAC,IAAD,KACE,yBAAK7C,GAAG,iBACN,yBAAKN,MAAO,IAAKC,OAAQ,IAAK4G,QAAQ,cAAcC,oBAAoB,oBAG5E,kBAAC,IAAD,KACE,4BAAQhB,UAAU,qBAAlB,YAEE,6BACEJ,EAHJ,W,GArNU9D,a,gBCpCZmF,EAAc,SAACC,EAAeC,GAClC/B,QAAQC,IAAI,SAAU8B,GACtB,IAAI9E,EAAW8E,EAAOvE,IAAI,SAAAgC,GAAQ,MAAK,CAACpE,GAAIoE,KAE5C,OADAQ,QAAQC,IAAI,MAAOhD,GACZzC,UAAA,YAAcsH,GAAd,YAAkC7E,GAAW,OAGhD+E,EAAc,SAACC,EAAelF,GAClC,IAAIQ,EAAWR,EAAIG,OAAO,SAACC,EAAKC,GAC9B,OAAOD,EAAIE,OAAOD,EAAKE,QAAQE,IAAI,SAAA0E,GACjC,MAAO,CAAC9F,OAAQgB,EAAKhC,GAAIiB,OAAQ6F,OAElC,IAGCC,EAAW3H,QAAQyH,EAAe1E,GAMtC,OAJgB/C,WAAW2H,EAAU,SAACzE,EAAGC,GACvC,OAAOD,EAAEtB,SAAWuB,EAAEvB,QAAUsB,EAAErB,SAAWsB,EAAEtB,UAM7C+F,EAAqB,SAACpF,EAAUkB,EAAcjB,GAElD,OAAOzC,aAAayC,EAASO,IAAI,SAAArC,GAAC,OAAIA,EAAEC,KAAK8C,EAAclB,IAI3CN,YCrCE2F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC,iB","file":"static/js/main.70237210.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport * as _ from 'lodash';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\n\nconst makeZoom = (g) => {\n  return d3.zoom().on('zoom', () => {\n    g.attr('transform', d3.event.transform);\n  })\n}\nclass D3Graph extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      restart: () => {}\n    }\n  }\n\n  componentDidMount() {\n    this.draw();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let { nodes, links } = this.props;\n    if (!_.isEqual(prevProps.nodes, nodes) || !_.isEqual(prevProps.links, links)) {\n      this.state.restart();\n    }\n  }\n\n  resetZoom() {\n    const svg = d3.select('svg');\n    svg.transition().duration(1000).call(makeZoom(svg.select('g')).transform, d3.zoomIdentity);\n  }\n\n  //https://bl.ocks.org/mbostock/1095795\n  draw() {\n    const svg = d3.select('svg').attr('class', 'svg-content'),\n    width = +svg.attr('width'),\n    height = +svg.attr('height'),\n    color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    let restart = () => {\n      // Apply the general update pattern to the nodes.\n      node = node.data(this.props.nodes, function(d) { return d.id;});\n      node.exit().remove();\n      // node = node.enter()\n      //   .append(\"circle\")\n      //   .attr(\"fill\", function(d) { return color(d.id); })\n      //   .attr(\"r\", 8)\n      //   .merge(node);\n\n      let enter = node.enter().append('g')\n        .attr('class', 'node')\n\n      let labels = enter.append('text')\n        .attr('x', 6)\n        .attr('y', 6)\n        .text(d => d.id)\n        .attr('fill', 'black')\n        .attr('stroke', 'black')\n        .attr('stroke-width', 0.25)\n\n      let circles = enter.append('circle')\n        .attr('fill', d => color(d.id))\n        .attr('r', 5)\n\n      node = node.merge(enter)\n\n      // node = node.merge(labels)\n      // node = node.merge(circles)\n\n      // Apply the general update pattern to the links.\n      link = link.data(this.props.links);\n      link.exit().remove();\n      link = link.enter().append(\"line\").merge(link);\n\n      // Update and restart the simulation.\n      simulation.nodes(this.props.nodes);\n      simulation.force(\"link\").links(this.props.links);\n      simulation.alpha(1).restart();\n    }\n\n    const ticked = () => {\n      // node.attr(\"cx\", function(d) { return d.x; })\n      //     .attr(\"cy\", function(d) { return d.y; })\n\n      node.attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\n\n\n      link.attr(\"x1\", function(d) { return d.source.x; })\n          .attr(\"y1\", function(d) { return d.source.y; })\n          .attr(\"x2\", function(d) { return d.target.x; })\n          .attr(\"y2\", function(d) { return d.target.y; });\n    }\n\n    var simulation = d3.forceSimulation(this.props.nodes)\n        .force(\"charge\", d3.forceManyBody().strength(-1000))\n        // use named sources and targets by referencing the ID\n        .force('link', d3.forceLink(this.props.links).id(d => d.id).distance(50))\n        .force(\"x\", d3.forceX(width/2).strength(1))\n        .force(\"y\", d3.forceY(height/2).strength(1))\n        .alphaTarget(0.01)\n        .on(\"tick\", ticked);\n\n    var g = svg.append(\"g\").attr('class', 'everything'),\n        link = g.append(\"g\").attr(\"stroke\", \"#000\").attr(\"stroke-width\", 1.5).selectAll(\".link\"),\n        node = g.append(\"g\").attr(\"stroke\", \"#fff\").attr(\"stroke-width\", 1.5).selectAll(\".node\");\n\n    // zoom in for the first time\n    svg.call(makeZoom(g));\n\n    restart();\n\n    this.setState({restart: restart});\n  }\n\n  render() {\n    return (\n      <Container>\n        <Button onClick={_ => this.resetZoom()}>Reset Zoom</Button>\n      </Container>\n    );\n  }\n}\n\nexport default D3Graph;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport * as _ from 'lodash';\n\nimport D3Graph from './D3Graph';\n\n\nconst base = 'https://api.github.com'\n\nconst idToNodeObj = (d) => {\n  return {id: d.login}\n}\n\nconst generateNodesLinksNext = (res, nodes, links, expanded) => {\n  // console.log('res',res);\n  // console.log(nodes);\n  // console.log(links);\n  // console.log(expanded);\n  // set the new nodes\n  // retrieve the new followers we just got\n  let newNodes = res.reduce((acc, curr) => {\n    return acc.concat(curr.targets);\n  }, []);\n  // console.log('newNodes', newNodes);\n  // union by id\n  newNodes = _.unionBy(nodes, newNodes, 'id');\n  // console.log(newNodes);\n\n  // update new links\n  let newLinks = res.reduce((acc, curr) => {\n    return acc.concat(curr.targets.map(({id}) => ({source: curr.id, target: id})));\n  }, links);\n  // console.log(newLinks);\n  // filter out unique links since a -> b but b -> a could be a possiblity\n  let uniqLinks = _.uniqWith(newLinks, (a, b) => {\n    return (a.source === b.source && a.target === b.target) ||\n    (a.source === b.target && a.target === b.source)\n  });\n  // console.log(uniqLinks);\n\n  // bug: expanded will be out of date because this.getFollowers() - FIXED\n  // nextNodes to expand are the followers - expanded nodes\n  let nextNodes = res.reduce((acc, curr) => {\n    return acc.concat(curr.targets.filter(({id}) => !expanded.has(id)));\n  }, []);\n  return {newNodes: newNodes, uniqLinks: uniqLinks, nextNodes: nextNodes};\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n    this.state = {\n      searchResults: {},\n      width: 600,\n      height: 400,\n      id: 'barchart',\n      nodes: [], // {id: \"abc\"}, must be unique\n      links: [], // {source: \"abc\", target: \"def\"}\n      nextToExpand: [], //[\"henrymwang\"] used to keep track of next nodes to expand\n      expanded: new Set(),\n      depth: 0\n    };\n  }\n\n  async getUser(value) {\n    const resp = await fetch(`${base}/users/${value}`);\n    if (resp.status === 200) {\n      return await resp.json();\n    }\n    return Promise.reject(new Error(resp.status));\n  }\n\n  async getFollowers(user) {\n    const resp = await fetch(`${base}/users/${user}/followers`);\n    if (resp.status === 200) {\n      return await resp.json();\n    }\n    return Promise.reject(new Error(resp.status));\n  }\n\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevState.depth !== this.state.depth) {\n      // update nodes\n      const { nextToExpand, nodes, expanded, links } = this.state;\n      // in format [{id: \"a\"}, ...]\n      // return format [{id: \"abc\", targets: [{id: \"a\"}, {id: \"b\"}]}]\n      let res = await Promise.all(nextToExpand.map(\n        async ({id}) => {\n          // could also do return this.getFollowers(id);\n          let jsonArr = await this.getFollowers(id);\n          // have to await again...!!!\n          let targets = await jsonArr.map(idToNodeObj);\n          // mark as expanded\n          expanded.add(id);\n          return {id: id, targets: await targets};\n        }\n      ));\n\n      let {newNodes, uniqLinks, nextNodes} = generateNodesLinksNext(res, nodes, links, expanded);\n      this.setState({nodes: newNodes, links: uniqLinks, nextToExpand: nextNodes});\n    }\n  }\n\n  handleIncrDepth() {\n    this.setState(({ depth }, props) => {\n      return {depth: depth + 1};\n    });\n  }\n\n  handleSearch() {\n    const value = this.textInput.current.value;\n    this.setState({depth: 0, nodes: [], links: [], nextToExpand: [], expanded: new Set()});\n    this.getUser(value)\n      .then(({login, followers, following, avatar_url}) => {\n        // destructure obj to access those fields\n        let searchResults = {\n          githubID: login,\n          followers: followers,\n          following: following,\n          avatarUrl: avatar_url\n        };\n        this.setState({searchResults: searchResults});\n        return searchResults.githubID;\n      })\n      .catch(err => {\n        // TODO: display user not found\n        this.setState({searchResults: {}});\n      })\n      .then(githubID => {\n        this.getFollowers(githubID)\n          .then(res => {\n            let constructedRes = {id: githubID, targets: res.map(({login}) => ({id: login}))};\n            this.setState(({nodes, links, expanded}) => {\n              // mark as expanded\n              expanded.add(githubID);\n              let {newNodes, uniqLinks, nextNodes} = generateNodesLinksNext([constructedRes], nodes, links, expanded);\n              newNodes = newNodes.concat({id: githubID});\n              // need to add myself the first time\n              return {nodes: newNodes, links: uniqLinks, nextToExpand: nextNodes};\n            });\n          })\n          .catch(err => {\n            // TODO: display user not found\n            this.setState({searchResults: {}});\n            console.log(err);\n          });\n      })\n      ;\n  }\n\n  render() {\n    let { searchResults } = this.state;\n    let githubID = searchResults.githubID;\n    let followers = searchResults.followers;\n    let following = searchResults.following;\n    let avatarUrl = searchResults.avatarUrl;\n\n    let rows;\n    if (Object.keys(searchResults).length === 0) {\n      rows = (<tr></tr>)\n    } else {\n      rows = (\n        <tr>\n          <td>\n            <img alt={\"avatar of \" + githubID} width={50} height={50} src={avatarUrl}>\n          </img>\n          </td>\n          <td>{ githubID }</td>\n          <td>{ followers }</td>\n          <td>{ following }</td>\n        </tr>\n      );\n    }\n\n    let libraries = [\n      {name: \"React.js\", href: \"https://reactjs.org/\"},\n      {name: \"D3.js (v5)\", href: \"https://d3js.org/\"},\n      {name: \"React-Bootstrap (Boostrap v4)\", href: \"https://react-bootstrap.github.io/\"},\n      {name: \"Github API\", href: \"https://developer.github.com/v3/\"}\n    ].map(({name, href}) => {\n      return (\n        <span key={name}>\n          <a href={href}>{name}</a>\n          <br/>\n        </span>\n      )\n    });\n\n    return (\n      <div className=\"App\">\n      <Container>\n        <Row>\n          <Col className=\"d-none d-lg-block\"></Col>\n          <Col>\n            <h3>\n              Github Network\n            </h3>\n            <div>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                  placeholder=\"Username (ex. henrymwang)\"\n                  aria-label=\"Username\"\n                  aria-describedby=\"basic-addon1\"\n                  ref={this.textInput}\n                  type=\"text\"\n                />\n                <InputGroup.Append>\n                  <Button variant=\"outline-secondary\" onClick={_ => this.handleSearch()}>Search</Button>\n                </InputGroup.Append>\n              </InputGroup>\n            </div>\n          </Col>\n          <Col className=\"d-none d-lg-block\"></Col>\n        </Row>\n        <Row>\n          <Col>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Avatar</th>\n                  <th>Username</th>\n                  <th>Followers</th>\n                  <th>Following</th>\n                </tr>\n              </thead>\n              <tbody>\n                { rows }\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row>\n          <D3Graph nodes={this.state.nodes} links={this.state.links}>\n          </D3Graph>\n        </Row>\n        <Row>\n          <Col>\n          {\n             (this.state.nodes.length > 0 && this.state.depth < 2) && (\n               <div>\n                <Button variant=\"outline-secondary\" onClick={_ => this.handleIncrDepth()}>\n                  Increase Depth\n                </Button>\n                <p>Depth: {this.state.depth}</p>\n              </div>\n            )\n          }\n\n          </Col>\n        </Row>\n      </Container>\n      <Container>\n        <div id=\"svg-container\">\n          <svg width={400} height={400} viewBox=\"0 0 400 400\" preserveAspectRatio=\"xMidYMid meet\"></svg>\n        </div>\n      </Container>\n      <Container>\n        <footer className=\"blockquote-footer\">\n          Made with\n          <br/>\n          { libraries }.\n        </footer>\n      </Container>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport * as _ from 'lodash';\n\nimport D3Graph from './D3Graph';\n\nconst base = 'https://api.github.com'\n\n// const depth = 3;\n\n// const graph = {};\n\nconst updateNodes = (existingNodes, newIDs) => {\n  console.log('newIDs', newIDs);\n  let newNodes = newIDs.map(githubID => ({id: githubID}));\n  console.log('New', newNodes);\n  return _.unionBy([...existingNodes], [...newNodes], 'id');\n};\n\nconst updateLinks = (existingLinks, res) => {\n  let newLinks = res.reduce((acc, curr) => {\n    return acc.concat(curr.targets.map(targetID => {\n      return {source: curr.id, target: targetID}\n    }))\n  }, []);\n\n  // links could be duplicated\n  let allLinks = _.union(existingLinks, newLinks);\n\n  let uniqLinks = _.uniqWith(allLinks, (a, b) => {\n    return a.source === b.source && a.target === b.target\n  });\n\n  return uniqLinks;\n}\n\nconst updateNextToExpand = (expanded, nextToExpand, newNodes) => {\n  // let nextNodes = updateNextToExpand(expanded, nextToExpand, nextIDs);\n  return _.difference(newNodes.map(d => d.id), nextToExpand, expanded);\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n    this.state = {\n      searchResults: {},\n      width: 600,\n      height: 400,\n      id: 'barchart',\n      nodes: [], // {id: \"abc\"}, must be unique\n      links: [], // {source: \"abc\", target: \"def\"}\n      nextToExpand: [], //[\"henrymwang\"] used to keep track of next nodes to expand\n      expanded: [], // [\"henrymwang\"] TODO: change to hashmap\n      depth: 0\n    };\n  }\n\n  async getUser(value) {\n    const resp = await fetch(`${base}/users/${value}`);\n    if (resp.status === 200) {\n      return await resp.json();\n    }\n    return Promise.reject(new Error(resp.status));\n  }\n\n  async getFollowers(user) {\n    const resp = await fetch(`${base}/users/${user}/followers`);\n    if (resp.status === 200) {\n      return await resp.json();\n    }\n    return Promise.reject(new Error(resp.status));\n  }\n\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevState.depth !== this.state.depth) {\n      // update nodes\n      const { nextToExpand, nodes, expanded, links } = this.state;\n      console.log('Exp', expanded);\n\n      console.log('NextToExpand', nextToExpand);\n      // let nextIDs = nextToExpand.map(node => node.id);\n      let res = await Promise.all(nextToExpand.map(\n        async id => {\n          // could also do return this.getFollowers(id);\n          let jsonArr = await this.getFollowers(id);\n          let targets = jsonArr.map(json => json.login);\n          return {id: id, targets: targets};\n        }\n      ));\n\n      console.log('Res',res);\n\n      let newIDs = res.reduce((acc, curr) => {\n        return acc.concat(curr.targets);\n      }, []);\n      // console.log(newIDs);\n      let newNodes = updateNodes(nodes, newIDs);\n      console.log(newNodes);\n\n      let newLinks = updateLinks(links, res);\n\n      // bug: expanded will be out of date because this.getFollowers()\n      // updates this.state.expanded\n      let nextNodes = updateNextToExpand(expanded, nextToExpand, newNodes);\n\n      console.log('Next Nodes', nextNodes);\n      this.setState({nodes: newNodes, links: newLinks, nextToExpand: nextNodes});\n    }\n  }\n\n  handleIncrDepth() {\n    this.setState(({ depth }, props) => {\n      return {depth: depth + 1};\n    });\n  }\n\n  generateNodesLinks(res, githubID) {\n    const nodes = res.map(d => ({id: d.login}));\n    this.setState(prevState => ({ expanded: [...this.state.expanded, githubID] }));\n    this.setState({nextToExpand: [...res].map(d => d.login)});\n    const links = res.map(d => ({source: githubID, target: d.login}));\n    return [[...nodes], [...links]];\n  }\n\n  handleSearch() {\n    const value = this.textInput.current.value;\n    this.setState({depth: 0, nodes: [], links: [], nextToExpand: [], expanded: []});\n    this.getUser(value)\n      .then(({login, followers, following, avatar_url}) => {\n        // destructure obj to access those fields\n        let searchResults = {\n          githubID: login,\n          followers: followers,\n          following: following,\n          avatarUrl: avatar_url\n        };\n        this.setState({searchResults: searchResults});\n        return searchResults.githubID;\n      })\n      .catch(err => {\n        // TODO: display user not found\n        this.setState({searchResults: {}});\n        console.log(err);\n      })\n      .then(githubID => {\n        this.getFollowers(githubID)\n          .then(res => {\n            const [nodes, links] = this.generateNodesLinks(res, githubID);\n            console.log(nodes);\n            let allNodes = [...nodes];\n            allNodes.unshift({id: githubID}); // add myself to front\n            this.setState({nodes: allNodes, links: links});\n          })\n          .catch(err => {\n            // TODO: display user not found\n            this.setState({searchResults: {}});\n            console.log(err);\n          });\n      })\n      ;\n  }\n\n  render() {\n    let { searchResults } = this.state;\n    let githubID = searchResults.githubID;\n    let followers = searchResults.followers;\n    let following = searchResults.following;\n    let avatarUrl = searchResults.avatarUrl;\n\n    let rows;\n    if (Object.keys(searchResults).length === 0) {\n      rows = (<tr></tr>)\n    } else {\n      rows = (\n        <tr>\n          <td>\n            <img alt={\"avatar of \" + githubID} width={50} height={50} src={avatarUrl}>\n          </img>\n          </td>\n          <td>{ githubID }</td>\n          <td>{ followers }</td>\n          <td>{ following }</td>\n        </tr>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n      <Container>\n        <Row>\n          <Col className=\"d-none d-lg-block\"></Col>\n          <Col>\n            <h3>\n              Github Network\n            </h3>\n            <div>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl\n                  placeholder=\"Username\"\n                  aria-label=\"Username\"\n                  aria-describedby=\"basic-addon1\"\n                  ref={this.textInput}\n                  type=\"text\"\n                />\n                <InputGroup.Append>\n                  <Button variant=\"outline-secondary\" onClick={_ => this.handleSearch()}>Search</Button>\n                </InputGroup.Append>\n              </InputGroup>\n            </div>\n          </Col>\n          <Col className=\"d-none d-lg-block\"></Col>\n        </Row>\n        <Row>\n          <Col>\n            <Table striped bordered hover>\n              <thead>\n                <tr>\n                  <th>Avatar</th>\n                  <th>Username</th>\n                  <th>Followers</th>\n                  <th>Following</th>\n                </tr>\n              </thead>\n              <tbody>\n                { rows }\n              </tbody>\n            </Table>\n          </Col>\n        </Row>\n        <Row>\n          <D3Graph nodes={this.state.nodes} links={this.state.links}>\n          </D3Graph>\n        </Row>\n        <Row>\n          <Col>\n          {\n             (this.state.nodes.length > 0 && this.state.depth < 2) && (\n               <div>\n                <Button variant=\"outline-secondary\" onClick={_ => this.handleIncrDepth()}>\n                  Increase Depth\n                </Button>\n                <p>Depth: {this.state.depth}</p>\n              </div>\n            )\n          }\n\n          </Col>\n        </Row>\n      </Container>\n      <Container>\n        <div id=\"svg-container\">\n        </div>\n      </Container>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport App2 from './App2';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}